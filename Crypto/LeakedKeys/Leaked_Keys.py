def invers(a, mod):
    GCD, x, y = egcd(a, mod)
    if x < 0:
        x += mod
    return x


# Extended Euclidean Algorithm To Find The Inverse
def egcd(x, y):
    if x == 0:
        return y, 0, 1
    else:
        g, z, h = egcd(y % x, x)
        return g, h - (y // x) * z, z

def decryptMsg(d, N, cipher):
    plainTxt = ''
    for c in cipher:
        if c:
            c2 = int(c)
            plainTxt += chr(pow(c2, d, N))
    return plainTxt


p = 10740812802287718847159356928814479133130095638282285831150269292095872893857016906946405836599130298300769882903306454902155729576895229942025197573524941
q = "Calculate it yourself ;)"
N = 140426576404876145941564917317219196745269959881916662031594526915294080875304532215716660688838521526706391774719169836572077313888511907805603655443839688159194294027414080695005757699111878765048812138814396784081925213747264049541836764612886559971520577263137997563242509078491582596014036285177834039587
phiN = "Calculate it yourself ;)"
e = 12727892917451045392170406387848720516182798647901947060965753239337134429659453710162295853873313674311219574005890268238398373863437815474212206210537259
d = "Calculate it yourself ;)"
cipher = ['116557503798788857376100621718047694839816247175462182446457033991776708145461236471472387727193260258168818721556356088665051323033000471762823999646005684853394978300344326077032582784557050330293975017118080949511820173484972937623720878170191036709067736950054738343578388612539065145103982214902126714154', '13892300897518418009631860855871501936055746013311669838207844482824827259257548341642733361434277445835973819488092917002844707423480174222516402491482896519045270897899868002543938298771442565806352436552876040584521987138743825484861860644112202895429238058844670070936923940346825051064120831540409137677', '9025869017085162930390291546189599672114321040394064930933983121684846468308052469104462956346663706585860856278779454471561671341159549500627401527562013211168633964285047314415335638305806460070637761109533785118497811383287290846126088720542265082486629093977256689692252845015603481187242823730150089437', '61595025912789807290427592978637096374363136680825971063117771271243495178720421424114098376377241399517279600606094615337626525477367641231640245624157104063464764797159458811908594924694147848014855058202039095668897114419240893990045340857899033069462275783704046218558273826718449922892859503926279249247', '33239688910776866429849786839030247095046414869522092644105103549930918156093128600069361951813369298244347755142863993619515946398327414992012029986500729735916091295205848210991031508959673177704616497782546856690979126282365327425103458580867099325691614859019403338201747436886080835400165775247427182260', '29829093172482823590856264352918803391430160994167107184732434571431211141818597157158980347901494837496212005729587704564852439662404400599558117265722641728856495081455009334780844430716293927569299590717409331394340135311179544279253152998327092794461416716895719759912991322419486682827976535175441841391', '41898743931983665911315695678652871357616073824837475576763732825226469457680506941882242373258657535324718974216905136850966166405874492798539705652971224111075989174226561730454871890377091241226734438443612131881626533352918538936327774542361675401361050226813247480195740758320269872928641863528954690272', '121246392962476051810532033230729069491257830712213731296489329088856220292490968675155723714790461936693784988590109264148266039570289170812813417478411752921013847707128722914716075462516344373191780656892637170348907301289801972120767965715656870368383224763935007493934813910327995666114968033980785949955', '54617715680959327457288146411711268825137790153581109988164350432575687617606639177587091352726412624630494475120645216308982608987270577861052003611106037241718639431897831483519251666436865838607947219789122768029182493286324015871793514228362698081355680846933703932019427004644096636211387536805308482314', '41898743931983665911315695678652871357616073824837475576763732825226469457680506941882242373258657535324718974216905136850966166405874492798539705652971224111075989174226561730454871890377091241226734438443612131881626533352918538936327774542361675401361050226813247480195740758320269872928641863528954690272', '114080376424924082693563069493376229125496172182400013663764850221357169646502105844172483922094225763358094739032478699410866089275275447991279352592581889205317814180592259144690488975359078038921781705848182789559600894660347193802163245204431163322712543693972965119065647776975714479560151863107741900383', '61595025912789807290427592978637096374363136680825971063117771271243495178720421424114098376377241399517279600606094615337626525477367641231640245624157104063464764797159458811908594924694147848014855058202039095668897114419240893990045340857899033069462275783704046218558273826718449922892859503926279249247', '81684397915217036890247364681666478033050599167840717983790296028228637264374555094320791768159506362848582872780920385008327442554752321457161361408501012418672079444507736582231545962008565806677020234885813225747606926223895943072351736959447560091787071279833084722709175568230470093008799752560207419383', '2155777775765862273289080568065411538188792075738513817887766326003810867496462716060325706981079752494577302338783326738425734957780612090321725730372852707640799366822331772265448554646627599961119230252079269853484636394592650143855452630831311377212585194948954443709033075940619440210663574531539041213', '113374569849933320087405217518930292494194046183767996736840856067204562730856252126994949257199041395716709095324469069566513655992139581713466394556123200780770487893816924756239819734023422245994269160877716921264103028249634469638399846542410928313014733285797353399573546593425398275471458593105008641249', '61595025912789807290427592978637096374363136680825971063117771271243495178720421424114098376377241399517279600606094615337626525477367641231640245624157104063464764797159458811908594924694147848014855058202039095668897114419240893990045340857899033069462275783704046218558273826718449922892859503926279249247', '118656328296319987048002080162783380988775954576639478660319510556308432260932209712673982748867806272251939729924659833794167669409468571825364379704845015856701556141248287110194057938218778176419138389418514194925238405360832205315274876961284564744572330329758437855150662652515775094323137052393860152927', '114080376424924082693563069493376229125496172182400013663764850221357169646502105844172483922094225763358094739032478699410866089275275447991279352592581889205317814180592259144690488975359078038921781705848182789559600894660347193802163245204431163322712543693972965119065647776975714479560151863107741900383', '47891824940383446345917069543686293999827843959986745343214591563722882191238110601982211497591598118641564393428250389797584288074002135322345459919765823992136048143088779152090962579701502513633651776219166683527518487510932130090032325184002455584478995729857367542130131998235841800066279564496543481222', '41650499887029215060659703628568778840355179094988214701599289200363874851815957003510206354346756386948250117387946333257162210745770852842488921653894148716920612221641601868095306149164954898799339124440419540418348558965168835230424396686630366580254177663562897965716964646726738132348445856807770879567', '61595025912789807290427592978637096374363136680825971063117771271243495178720421424114098376377241399517279600606094615337626525477367641231640245624157104063464764797159458811908594924694147848014855058202039095668897114419240893990045340857899033069462275783704046218558273826718449922892859503926279249247', '37463664150590225381706831514498868178559527543337550179803972507482393538167137764008503204744717691625441968332992751519164549688357684544277544270276515392622125188275738291607800688182946417008880221282689545680378016006942654755198507587697422694669835113306511436703557337305253776475265799462912364348', '2155777775765862273289080568065411538188792075738513817887766326003810867496462716060325706981079752494577302338783326738425734957780612090321725730372852707640799366822331772265448554646627599961119230252079269853484636394592650143855452630831311377212585194948954443709033075940619440210663574531539041213', '37463664150590225381706831514498868178559527543337550179803972507482393538167137764008503204744717691625441968332992751519164549688357684544277544270276515392622125188275738291607800688182946417008880221282689545680378016006942654755198507587697422694669835113306511436703557337305253776475265799462912364348', '37633622250823482256150511382066114552848202059942912492353290259453118650558015199389087595989052702872403275445545523850577010311544259684474649840086254543672484894101540261759490558096655112632874680540070237649673702965164381676763341751470126067390440543356160243056692196383849744568590860777094592802']
dec = decryptMsg(d, N, cipher)
print("The Flag: " + dec)